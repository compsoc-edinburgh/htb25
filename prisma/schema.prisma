// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(cuid())
  email String @unique

  first_name           String?
  last_name            String?
  country              String?
  university_name      String?
  university_year      String?
  university_email     String?
  cv_url               String?
  portfolio_url        String?
  placements_count     String?
  hackathons_count     String?
  project_description  String?
  needs_reimbursement  Boolean?
  travelling_from      String?
  calendar_email       String?
  
  // Onboarding
  dietary_restrictions String?
  pronouns             String?

  shirt_size           String?
  food_choice_1        String? 
  food_choice_2        String?
  food_choice_3        String?
  pizza_choice         String?

  team_id String?
  team    Team?   @relation(fields: [team_id], references: [id])

  applications Application[]

  created_at DateTime @default(now())
  created_by String?
  updated_at DateTime @updatedAt
  updated_by String?

  challengeCompletions ChallengeCompletion[]
}

model Team {
  id           String        @id @default(cuid())
  name         String
  code         String        @unique
  members      User[]
  applications Application[]

  created_at DateTime @default(now())
  created_by String?
  updated_at DateTime @updatedAt
  updated_by String?
}

enum ApplicationStatus {
  pending
  accepted
  rejected
}

model Application {
  id      String  @id @default(cuid())
  user_id String
  user    User    @relation(fields: [user_id], references: [id])
  team_id String?
  team    Team?   @relation(fields: [team_id], references: [id])

  status           ApplicationStatus @default(pending)
  rejection_reason String?

  created_at DateTime @default(now())
  created_by String?
  updated_at DateTime @updatedAt
  updated_by String?
}

model MailingList {
  id         String   @id @default(cuid())
  email      String   @unique
  token      String   @default(uuid()) @unique
  created_at DateTime @default(now())
}

model ChallengeCompletion {
    id        String   @id @default(cuid())
    userId    String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])

    @@unique([userId])
}
